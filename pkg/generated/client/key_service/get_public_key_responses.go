// Code generated by go-swagger; DO NOT EDIT.

package key_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	models2 "github.com/notasecret/peacemakr-go-sdk/pkg/generated/models"
	"io"

	"github.com/go-openapi/runtime"

	"github.com/go-openapi/strfmt"
)

// GetPublicKeyReader is a Reader for the GetPublicKey structure.
type GetPublicKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPublicKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPublicKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetPublicKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetPublicKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetPublicKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetPublicKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPublicKeyOK creates a GetPublicKeyOK with default headers values
func NewGetPublicKeyOK() *GetPublicKeyOK {
	return &GetPublicKeyOK{}
}

/*GetPublicKeyOK handles this case with default header values.

Returns a public key in PEM format
*/
type GetPublicKeyOK struct {
	Payload *models2.PublicKey
}

func (o *GetPublicKeyOK) Error() string {
	return fmt.Sprintf("[GET /crypto/asymmetric/{keyID}][%d] getPublicKeyOK  %+v", 200, o.Payload)
}

func (o *GetPublicKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models2.PublicKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicKeyBadRequest creates a GetPublicKeyBadRequest with default headers values
func NewGetPublicKeyBadRequest() *GetPublicKeyBadRequest {
	return &GetPublicKeyBadRequest{}
}

/*GetPublicKeyBadRequest handles this case with default header values.

Unable to process request
*/
type GetPublicKeyBadRequest struct {
}

func (o *GetPublicKeyBadRequest) Error() string {
	return fmt.Sprintf("[GET /crypto/asymmetric/{keyID}][%d] getPublicKeyBadRequest ", 400)
}

func (o *GetPublicKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPublicKeyUnauthorized creates a GetPublicKeyUnauthorized with default headers values
func NewGetPublicKeyUnauthorized() *GetPublicKeyUnauthorized {
	return &GetPublicKeyUnauthorized{}
}

/*GetPublicKeyUnauthorized handles this case with default header values.

Not authenticated
*/
type GetPublicKeyUnauthorized struct {
}

func (o *GetPublicKeyUnauthorized) Error() string {
	return fmt.Sprintf("[GET /crypto/asymmetric/{keyID}][%d] getPublicKeyUnauthorized ", 401)
}

func (o *GetPublicKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPublicKeyForbidden creates a GetPublicKeyForbidden with default headers values
func NewGetPublicKeyForbidden() *GetPublicKeyForbidden {
	return &GetPublicKeyForbidden{}
}

/*GetPublicKeyForbidden handles this case with default header values.

Not authorized
*/
type GetPublicKeyForbidden struct {
}

func (o *GetPublicKeyForbidden) Error() string {
	return fmt.Sprintf("[GET /crypto/asymmetric/{keyID}][%d] getPublicKeyForbidden ", 403)
}

func (o *GetPublicKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPublicKeyInternalServerError creates a GetPublicKeyInternalServerError with default headers values
func NewGetPublicKeyInternalServerError() *GetPublicKeyInternalServerError {
	return &GetPublicKeyInternalServerError{}
}

/*GetPublicKeyInternalServerError handles this case with default header values.

Internal server error
*/
type GetPublicKeyInternalServerError struct {
}

func (o *GetPublicKeyInternalServerError) Error() string {
	return fmt.Sprintf("[GET /crypto/asymmetric/{keyID}][%d] getPublicKeyInternalServerError ", 500)
}

func (o *GetPublicKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
