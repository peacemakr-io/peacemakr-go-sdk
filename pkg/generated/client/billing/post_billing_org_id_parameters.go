// Code generated by go-swagger; DO NOT EDIT.

package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/peacemakr-io/peacemakr-go-sdk/pkg/generated/models"
)

// NewPostBillingOrgIDParams creates a new PostBillingOrgIDParams object
// with the default values initialized.
func NewPostBillingOrgIDParams() *PostBillingOrgIDParams {
	var ()
	return &PostBillingOrgIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostBillingOrgIDParamsWithTimeout creates a new PostBillingOrgIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostBillingOrgIDParamsWithTimeout(timeout time.Duration) *PostBillingOrgIDParams {
	var ()
	return &PostBillingOrgIDParams{

		timeout: timeout,
	}
}

// NewPostBillingOrgIDParamsWithContext creates a new PostBillingOrgIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostBillingOrgIDParamsWithContext(ctx context.Context) *PostBillingOrgIDParams {
	var ()
	return &PostBillingOrgIDParams{

		Context: ctx,
	}
}

// NewPostBillingOrgIDParamsWithHTTPClient creates a new PostBillingOrgIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostBillingOrgIDParamsWithHTTPClient(client *http.Client) *PostBillingOrgIDParams {
	var ()
	return &PostBillingOrgIDParams{
		HTTPClient: client,
	}
}

/*PostBillingOrgIDParams contains all the parameters to send to the API endpoint
for the post billing org ID operation typically these are written to a http.Request
*/
type PostBillingOrgIDParams struct {

	/*NewPlan*/
	NewPlan *models.PricingPlan
	/*OrgID*/
	OrgID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post billing org ID params
func (o *PostBillingOrgIDParams) WithTimeout(timeout time.Duration) *PostBillingOrgIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post billing org ID params
func (o *PostBillingOrgIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post billing org ID params
func (o *PostBillingOrgIDParams) WithContext(ctx context.Context) *PostBillingOrgIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post billing org ID params
func (o *PostBillingOrgIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post billing org ID params
func (o *PostBillingOrgIDParams) WithHTTPClient(client *http.Client) *PostBillingOrgIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post billing org ID params
func (o *PostBillingOrgIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNewPlan adds the newPlan to the post billing org ID params
func (o *PostBillingOrgIDParams) WithNewPlan(newPlan *models.PricingPlan) *PostBillingOrgIDParams {
	o.SetNewPlan(newPlan)
	return o
}

// SetNewPlan adds the newPlan to the post billing org ID params
func (o *PostBillingOrgIDParams) SetNewPlan(newPlan *models.PricingPlan) {
	o.NewPlan = newPlan
}

// WithOrgID adds the orgID to the post billing org ID params
func (o *PostBillingOrgIDParams) WithOrgID(orgID string) *PostBillingOrgIDParams {
	o.SetOrgID(orgID)
	return o
}

// SetOrgID adds the orgId to the post billing org ID params
func (o *PostBillingOrgIDParams) SetOrgID(orgID string) {
	o.OrgID = orgID
}

// WriteToRequest writes these params to a swagger request
func (o *PostBillingOrgIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NewPlan != nil {
		if err := r.SetBodyParam(o.NewPlan); err != nil {
			return err
		}
	}

	// path param orgId
	if err := r.SetPathParam("orgId", o.OrgID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
