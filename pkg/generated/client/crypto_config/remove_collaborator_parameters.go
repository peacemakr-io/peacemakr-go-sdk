// Code generated by go-swagger; DO NOT EDIT.

package crypto_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRemoveCollaboratorParams creates a new RemoveCollaboratorParams object
// with the default values initialized.
func NewRemoveCollaboratorParams() *RemoveCollaboratorParams {
	var ()
	return &RemoveCollaboratorParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveCollaboratorParamsWithTimeout creates a new RemoveCollaboratorParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoveCollaboratorParamsWithTimeout(timeout time.Duration) *RemoveCollaboratorParams {
	var ()
	return &RemoveCollaboratorParams{

		timeout: timeout,
	}
}

// NewRemoveCollaboratorParamsWithContext creates a new RemoveCollaboratorParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemoveCollaboratorParamsWithContext(ctx context.Context) *RemoveCollaboratorParams {
	var ()
	return &RemoveCollaboratorParams{

		Context: ctx,
	}
}

// NewRemoveCollaboratorParamsWithHTTPClient creates a new RemoveCollaboratorParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoveCollaboratorParamsWithHTTPClient(client *http.Client) *RemoveCollaboratorParams {
	var ()
	return &RemoveCollaboratorParams{
		HTTPClient: client,
	}
}

/*RemoveCollaboratorParams contains all the parameters to send to the API endpoint
for the remove collaborator operation typically these are written to a http.Request
*/
type RemoveCollaboratorParams struct {

	/*CollaboratingOrgID*/
	CollaboratingOrgID string
	/*IDToken*/
	IDToken string
	/*UseDomainID*/
	UseDomainID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove collaborator params
func (o *RemoveCollaboratorParams) WithTimeout(timeout time.Duration) *RemoveCollaboratorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove collaborator params
func (o *RemoveCollaboratorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove collaborator params
func (o *RemoveCollaboratorParams) WithContext(ctx context.Context) *RemoveCollaboratorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove collaborator params
func (o *RemoveCollaboratorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove collaborator params
func (o *RemoveCollaboratorParams) WithHTTPClient(client *http.Client) *RemoveCollaboratorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove collaborator params
func (o *RemoveCollaboratorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCollaboratingOrgID adds the collaboratingOrgID to the remove collaborator params
func (o *RemoveCollaboratorParams) WithCollaboratingOrgID(collaboratingOrgID string) *RemoveCollaboratorParams {
	o.SetCollaboratingOrgID(collaboratingOrgID)
	return o
}

// SetCollaboratingOrgID adds the collaboratingOrgId to the remove collaborator params
func (o *RemoveCollaboratorParams) SetCollaboratingOrgID(collaboratingOrgID string) {
	o.CollaboratingOrgID = collaboratingOrgID
}

// WithIDToken adds the iDToken to the remove collaborator params
func (o *RemoveCollaboratorParams) WithIDToken(iDToken string) *RemoveCollaboratorParams {
	o.SetIDToken(iDToken)
	return o
}

// SetIDToken adds the idToken to the remove collaborator params
func (o *RemoveCollaboratorParams) SetIDToken(iDToken string) {
	o.IDToken = iDToken
}

// WithUseDomainID adds the useDomainID to the remove collaborator params
func (o *RemoveCollaboratorParams) WithUseDomainID(useDomainID string) *RemoveCollaboratorParams {
	o.SetUseDomainID(useDomainID)
	return o
}

// SetUseDomainID adds the useDomainId to the remove collaborator params
func (o *RemoveCollaboratorParams) SetUseDomainID(useDomainID string) {
	o.UseDomainID = useDomainID
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveCollaboratorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param collaboratingOrgId
	qrCollaboratingOrgID := o.CollaboratingOrgID
	qCollaboratingOrgID := qrCollaboratingOrgID
	if qCollaboratingOrgID != "" {
		if err := r.SetQueryParam("collaboratingOrgId", qCollaboratingOrgID); err != nil {
			return err
		}
	}

	// query param idToken
	qrIDToken := o.IDToken
	qIDToken := qrIDToken
	if qIDToken != "" {
		if err := r.SetQueryParam("idToken", qIDToken); err != nil {
			return err
		}
	}

	// path param useDomainId
	if err := r.SetPathParam("useDomainId", o.UseDomainID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
