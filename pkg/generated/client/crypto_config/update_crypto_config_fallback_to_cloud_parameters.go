// Code generated by go-swagger; DO NOT EDIT.

package crypto_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateCryptoConfigFallbackToCloudParams creates a new UpdateCryptoConfigFallbackToCloudParams object
// with the default values initialized.
func NewUpdateCryptoConfigFallbackToCloudParams() *UpdateCryptoConfigFallbackToCloudParams {
	var ()
	return &UpdateCryptoConfigFallbackToCloudParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateCryptoConfigFallbackToCloudParamsWithTimeout creates a new UpdateCryptoConfigFallbackToCloudParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateCryptoConfigFallbackToCloudParamsWithTimeout(timeout time.Duration) *UpdateCryptoConfigFallbackToCloudParams {
	var ()
	return &UpdateCryptoConfigFallbackToCloudParams{

		timeout: timeout,
	}
}

// NewUpdateCryptoConfigFallbackToCloudParamsWithContext creates a new UpdateCryptoConfigFallbackToCloudParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateCryptoConfigFallbackToCloudParamsWithContext(ctx context.Context) *UpdateCryptoConfigFallbackToCloudParams {
	var ()
	return &UpdateCryptoConfigFallbackToCloudParams{

		Context: ctx,
	}
}

// NewUpdateCryptoConfigFallbackToCloudParamsWithHTTPClient creates a new UpdateCryptoConfigFallbackToCloudParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateCryptoConfigFallbackToCloudParamsWithHTTPClient(client *http.Client) *UpdateCryptoConfigFallbackToCloudParams {
	var ()
	return &UpdateCryptoConfigFallbackToCloudParams{
		HTTPClient: client,
	}
}

/*UpdateCryptoConfigFallbackToCloudParams contains all the parameters to send to the API endpoint
for the update crypto config fallback to cloud operation typically these are written to a http.Request
*/
type UpdateCryptoConfigFallbackToCloudParams struct {

	/*FallbackToCloud*/
	FallbackToCloud bool
	/*UseDomainID*/
	UseDomainID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update crypto config fallback to cloud params
func (o *UpdateCryptoConfigFallbackToCloudParams) WithTimeout(timeout time.Duration) *UpdateCryptoConfigFallbackToCloudParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update crypto config fallback to cloud params
func (o *UpdateCryptoConfigFallbackToCloudParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update crypto config fallback to cloud params
func (o *UpdateCryptoConfigFallbackToCloudParams) WithContext(ctx context.Context) *UpdateCryptoConfigFallbackToCloudParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update crypto config fallback to cloud params
func (o *UpdateCryptoConfigFallbackToCloudParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update crypto config fallback to cloud params
func (o *UpdateCryptoConfigFallbackToCloudParams) WithHTTPClient(client *http.Client) *UpdateCryptoConfigFallbackToCloudParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update crypto config fallback to cloud params
func (o *UpdateCryptoConfigFallbackToCloudParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFallbackToCloud adds the fallbackToCloud to the update crypto config fallback to cloud params
func (o *UpdateCryptoConfigFallbackToCloudParams) WithFallbackToCloud(fallbackToCloud bool) *UpdateCryptoConfigFallbackToCloudParams {
	o.SetFallbackToCloud(fallbackToCloud)
	return o
}

// SetFallbackToCloud adds the fallbackToCloud to the update crypto config fallback to cloud params
func (o *UpdateCryptoConfigFallbackToCloudParams) SetFallbackToCloud(fallbackToCloud bool) {
	o.FallbackToCloud = fallbackToCloud
}

// WithUseDomainID adds the useDomainID to the update crypto config fallback to cloud params
func (o *UpdateCryptoConfigFallbackToCloudParams) WithUseDomainID(useDomainID string) *UpdateCryptoConfigFallbackToCloudParams {
	o.SetUseDomainID(useDomainID)
	return o
}

// SetUseDomainID adds the useDomainId to the update crypto config fallback to cloud params
func (o *UpdateCryptoConfigFallbackToCloudParams) SetUseDomainID(useDomainID string) {
	o.UseDomainID = useDomainID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateCryptoConfigFallbackToCloudParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param fallbackToCloud
	qrFallbackToCloud := o.FallbackToCloud
	qFallbackToCloud := swag.FormatBool(qrFallbackToCloud)
	if qFallbackToCloud != "" {
		if err := r.SetQueryParam("fallbackToCloud", qFallbackToCloud); err != nil {
			return err
		}
	}

	// path param useDomainId
	if err := r.SetPathParam("useDomainId", o.UseDomainID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
