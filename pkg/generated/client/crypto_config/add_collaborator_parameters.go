// Code generated by go-swagger; DO NOT EDIT.

package crypto_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddCollaboratorParams creates a new AddCollaboratorParams object
// with the default values initialized.
func NewAddCollaboratorParams() *AddCollaboratorParams {
	var ()
	return &AddCollaboratorParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddCollaboratorParamsWithTimeout creates a new AddCollaboratorParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddCollaboratorParamsWithTimeout(timeout time.Duration) *AddCollaboratorParams {
	var ()
	return &AddCollaboratorParams{

		timeout: timeout,
	}
}

// NewAddCollaboratorParamsWithContext creates a new AddCollaboratorParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddCollaboratorParamsWithContext(ctx context.Context) *AddCollaboratorParams {
	var ()
	return &AddCollaboratorParams{

		Context: ctx,
	}
}

// NewAddCollaboratorParamsWithHTTPClient creates a new AddCollaboratorParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddCollaboratorParamsWithHTTPClient(client *http.Client) *AddCollaboratorParams {
	var ()
	return &AddCollaboratorParams{
		HTTPClient: client,
	}
}

/*AddCollaboratorParams contains all the parameters to send to the API endpoint
for the add collaborator operation typically these are written to a http.Request
*/
type AddCollaboratorParams struct {

	/*CollaboratingOrgID*/
	CollaboratingOrgID string
	/*IDToken*/
	IDToken string
	/*UseDomainID*/
	UseDomainID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add collaborator params
func (o *AddCollaboratorParams) WithTimeout(timeout time.Duration) *AddCollaboratorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add collaborator params
func (o *AddCollaboratorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add collaborator params
func (o *AddCollaboratorParams) WithContext(ctx context.Context) *AddCollaboratorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add collaborator params
func (o *AddCollaboratorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add collaborator params
func (o *AddCollaboratorParams) WithHTTPClient(client *http.Client) *AddCollaboratorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add collaborator params
func (o *AddCollaboratorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCollaboratingOrgID adds the collaboratingOrgID to the add collaborator params
func (o *AddCollaboratorParams) WithCollaboratingOrgID(collaboratingOrgID string) *AddCollaboratorParams {
	o.SetCollaboratingOrgID(collaboratingOrgID)
	return o
}

// SetCollaboratingOrgID adds the collaboratingOrgId to the add collaborator params
func (o *AddCollaboratorParams) SetCollaboratingOrgID(collaboratingOrgID string) {
	o.CollaboratingOrgID = collaboratingOrgID
}

// WithIDToken adds the iDToken to the add collaborator params
func (o *AddCollaboratorParams) WithIDToken(iDToken string) *AddCollaboratorParams {
	o.SetIDToken(iDToken)
	return o
}

// SetIDToken adds the idToken to the add collaborator params
func (o *AddCollaboratorParams) SetIDToken(iDToken string) {
	o.IDToken = iDToken
}

// WithUseDomainID adds the useDomainID to the add collaborator params
func (o *AddCollaboratorParams) WithUseDomainID(useDomainID string) *AddCollaboratorParams {
	o.SetUseDomainID(useDomainID)
	return o
}

// SetUseDomainID adds the useDomainId to the add collaborator params
func (o *AddCollaboratorParams) SetUseDomainID(useDomainID string) {
	o.UseDomainID = useDomainID
}

// WriteToRequest writes these params to a swagger request
func (o *AddCollaboratorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param collaboratingOrgId
	qrCollaboratingOrgID := o.CollaboratingOrgID
	qCollaboratingOrgID := qrCollaboratingOrgID
	if qCollaboratingOrgID != "" {
		if err := r.SetQueryParam("collaboratingOrgId", qCollaboratingOrgID); err != nil {
			return err
		}
	}

	// query param idToken
	qrIDToken := o.IDToken
	qIDToken := qrIDToken
	if qIDToken != "" {
		if err := r.SetQueryParam("idToken", qIDToken); err != nil {
			return err
		}
	}

	// path param useDomainId
	if err := r.SetPathParam("useDomainId", o.UseDomainID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
