// Code generated by go-swagger; DO NOT EDIT.

package crypto_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateCryptoConfigSelectorSchemeReader is a Reader for the UpdateCryptoConfigSelectorScheme structure.
type UpdateCryptoConfigSelectorSchemeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCryptoConfigSelectorSchemeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateCryptoConfigSelectorSchemeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateCryptoConfigSelectorSchemeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCryptoConfigSelectorSchemeOK creates a UpdateCryptoConfigSelectorSchemeOK with default headers values
func NewUpdateCryptoConfigSelectorSchemeOK() *UpdateCryptoConfigSelectorSchemeOK {
	return &UpdateCryptoConfigSelectorSchemeOK{}
}

/*UpdateCryptoConfigSelectorSchemeOK handles this case with default header values.

Successfully updated the crypto config
*/
type UpdateCryptoConfigSelectorSchemeOK struct {
}

func (o *UpdateCryptoConfigSelectorSchemeOK) Error() string {
	return fmt.Sprintf("[PUT /crypto/config/{cryptoConfigId}/domainSelectorScheme][%d] updateCryptoConfigSelectorSchemeOK ", 200)
}

func (o *UpdateCryptoConfigSelectorSchemeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCryptoConfigSelectorSchemeBadRequest creates a UpdateCryptoConfigSelectorSchemeBadRequest with default headers values
func NewUpdateCryptoConfigSelectorSchemeBadRequest() *UpdateCryptoConfigSelectorSchemeBadRequest {
	return &UpdateCryptoConfigSelectorSchemeBadRequest{}
}

/*UpdateCryptoConfigSelectorSchemeBadRequest handles this case with default header values.

Unable to process request
*/
type UpdateCryptoConfigSelectorSchemeBadRequest struct {
}

func (o *UpdateCryptoConfigSelectorSchemeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /crypto/config/{cryptoConfigId}/domainSelectorScheme][%d] updateCryptoConfigSelectorSchemeBadRequest ", 400)
}

func (o *UpdateCryptoConfigSelectorSchemeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
