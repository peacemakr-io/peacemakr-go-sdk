// Code generated by go-swagger; DO NOT EDIT.

package crypto_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRapidRotationUseDomainParams creates a new RapidRotationUseDomainParams object
// with the default values initialized.
func NewRapidRotationUseDomainParams() *RapidRotationUseDomainParams {
	var ()
	return &RapidRotationUseDomainParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRapidRotationUseDomainParamsWithTimeout creates a new RapidRotationUseDomainParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRapidRotationUseDomainParamsWithTimeout(timeout time.Duration) *RapidRotationUseDomainParams {
	var ()
	return &RapidRotationUseDomainParams{

		timeout: timeout,
	}
}

// NewRapidRotationUseDomainParamsWithContext creates a new RapidRotationUseDomainParams object
// with the default values initialized, and the ability to set a context for a request
func NewRapidRotationUseDomainParamsWithContext(ctx context.Context) *RapidRotationUseDomainParams {
	var ()
	return &RapidRotationUseDomainParams{

		Context: ctx,
	}
}

// NewRapidRotationUseDomainParamsWithHTTPClient creates a new RapidRotationUseDomainParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRapidRotationUseDomainParamsWithHTTPClient(client *http.Client) *RapidRotationUseDomainParams {
	var ()
	return &RapidRotationUseDomainParams{
		HTTPClient: client,
	}
}

/*RapidRotationUseDomainParams contains all the parameters to send to the API endpoint
for the rapid rotation use domain operation typically these are written to a http.Request
*/
type RapidRotationUseDomainParams struct {

	/*OptionalNextKeyDerivationServiceID*/
	OptionalNextKeyDerivationServiceID *string
	/*UseDomainID*/
	UseDomainID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the rapid rotation use domain params
func (o *RapidRotationUseDomainParams) WithTimeout(timeout time.Duration) *RapidRotationUseDomainParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the rapid rotation use domain params
func (o *RapidRotationUseDomainParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the rapid rotation use domain params
func (o *RapidRotationUseDomainParams) WithContext(ctx context.Context) *RapidRotationUseDomainParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the rapid rotation use domain params
func (o *RapidRotationUseDomainParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the rapid rotation use domain params
func (o *RapidRotationUseDomainParams) WithHTTPClient(client *http.Client) *RapidRotationUseDomainParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the rapid rotation use domain params
func (o *RapidRotationUseDomainParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOptionalNextKeyDerivationServiceID adds the optionalNextKeyDerivationServiceID to the rapid rotation use domain params
func (o *RapidRotationUseDomainParams) WithOptionalNextKeyDerivationServiceID(optionalNextKeyDerivationServiceID *string) *RapidRotationUseDomainParams {
	o.SetOptionalNextKeyDerivationServiceID(optionalNextKeyDerivationServiceID)
	return o
}

// SetOptionalNextKeyDerivationServiceID adds the optionalNextKeyDerivationServiceId to the rapid rotation use domain params
func (o *RapidRotationUseDomainParams) SetOptionalNextKeyDerivationServiceID(optionalNextKeyDerivationServiceID *string) {
	o.OptionalNextKeyDerivationServiceID = optionalNextKeyDerivationServiceID
}

// WithUseDomainID adds the useDomainID to the rapid rotation use domain params
func (o *RapidRotationUseDomainParams) WithUseDomainID(useDomainID string) *RapidRotationUseDomainParams {
	o.SetUseDomainID(useDomainID)
	return o
}

// SetUseDomainID adds the useDomainId to the rapid rotation use domain params
func (o *RapidRotationUseDomainParams) SetUseDomainID(useDomainID string) {
	o.UseDomainID = useDomainID
}

// WriteToRequest writes these params to a swagger request
func (o *RapidRotationUseDomainParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OptionalNextKeyDerivationServiceID != nil {

		// query param optionalNextKeyDerivationServiceId
		var qrOptionalNextKeyDerivationServiceID string
		if o.OptionalNextKeyDerivationServiceID != nil {
			qrOptionalNextKeyDerivationServiceID = *o.OptionalNextKeyDerivationServiceID
		}
		qOptionalNextKeyDerivationServiceID := qrOptionalNextKeyDerivationServiceID
		if qOptionalNextKeyDerivationServiceID != "" {
			if err := r.SetQueryParam("optionalNextKeyDerivationServiceId", qOptionalNextKeyDerivationServiceID); err != nil {
				return err
			}
		}

	}

	// path param useDomainId
	if err := r.SetPathParam("useDomainId", o.UseDomainID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
