// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewReturnPagedClientIdsParams creates a new ReturnPagedClientIdsParams object
// with the default values initialized.
func NewReturnPagedClientIdsParams() *ReturnPagedClientIdsParams {
	var ()
	return &ReturnPagedClientIdsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReturnPagedClientIdsParamsWithTimeout creates a new ReturnPagedClientIdsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReturnPagedClientIdsParamsWithTimeout(timeout time.Duration) *ReturnPagedClientIdsParams {
	var ()
	return &ReturnPagedClientIdsParams{

		timeout: timeout,
	}
}

// NewReturnPagedClientIdsParamsWithContext creates a new ReturnPagedClientIdsParams object
// with the default values initialized, and the ability to set a context for a request
func NewReturnPagedClientIdsParamsWithContext(ctx context.Context) *ReturnPagedClientIdsParams {
	var ()
	return &ReturnPagedClientIdsParams{

		Context: ctx,
	}
}

// NewReturnPagedClientIdsParamsWithHTTPClient creates a new ReturnPagedClientIdsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReturnPagedClientIdsParamsWithHTTPClient(client *http.Client) *ReturnPagedClientIdsParams {
	var ()
	return &ReturnPagedClientIdsParams{
		HTTPClient: client,
	}
}

/*ReturnPagedClientIdsParams contains all the parameters to send to the API endpoint
for the return paged client ids operation typically these are written to a http.Request
*/
type ReturnPagedClientIdsParams struct {

	/*Page*/
	Page int64
	/*PageSize*/
	PageSize int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the return paged client ids params
func (o *ReturnPagedClientIdsParams) WithTimeout(timeout time.Duration) *ReturnPagedClientIdsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the return paged client ids params
func (o *ReturnPagedClientIdsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the return paged client ids params
func (o *ReturnPagedClientIdsParams) WithContext(ctx context.Context) *ReturnPagedClientIdsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the return paged client ids params
func (o *ReturnPagedClientIdsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the return paged client ids params
func (o *ReturnPagedClientIdsParams) WithHTTPClient(client *http.Client) *ReturnPagedClientIdsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the return paged client ids params
func (o *ReturnPagedClientIdsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPage adds the page to the return paged client ids params
func (o *ReturnPagedClientIdsParams) WithPage(page int64) *ReturnPagedClientIdsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the return paged client ids params
func (o *ReturnPagedClientIdsParams) SetPage(page int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the return paged client ids params
func (o *ReturnPagedClientIdsParams) WithPageSize(pageSize int64) *ReturnPagedClientIdsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the return paged client ids params
func (o *ReturnPagedClientIdsParams) SetPageSize(pageSize int64) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *ReturnPagedClientIdsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param page
	qrPage := o.Page
	qPage := swag.FormatInt64(qrPage)
	if qPage != "" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param pageSize
	qrPageSize := o.PageSize
	qPageSize := swag.FormatInt64(qrPageSize)
	if qPageSize != "" {
		if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
