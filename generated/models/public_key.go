// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicKey public key
// swagger:model PublicKey
type PublicKey struct {

	// creation time
	// Required: true
	CreationTime *int64 `json:"creationTime"`

	// encoding
	// Required: true
	Encoding *string `json:"encoding"`

	// id
	// Required: true
	ID *string `json:"id"`

	// key
	// Required: true
	Key *string `json:"key"`

	// key type
	// Required: true
	KeyType *string `json:"keyType"`
}

// Validate validates this public key
func (m *PublicKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncoding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicKey) validateCreationTime(formats strfmt.Registry) error {

	if err := validate.Required("creationTime", "body", m.CreationTime); err != nil {
		return err
	}

	return nil
}

func (m *PublicKey) validateEncoding(formats strfmt.Registry) error {

	if err := validate.Required("encoding", "body", m.Encoding); err != nil {
		return err
	}

	return nil
}

func (m *PublicKey) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PublicKey) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *PublicKey) validateKeyType(formats strfmt.Registry) error {

	if err := validate.Required("keyType", "body", m.KeyType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicKey) UnmarshalBinary(b []byte) error {
	var res PublicKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
