// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIKey API key
// swagger:model APIKey
type APIKey struct {

	// list of useDomains that APIKey has access to
	AuthorizedUseDomains []string `json:"authorizedUseDomains"`

	// creation time
	CreationTime int64 `json:"creationTime,omitempty"`

	// creator
	Creator *Contact `json:"creator,omitempty"`

	// key
	// Required: true
	Key *string `json:"key"`

	// org Id
	// Required: true
	OrgID *string `json:"orgId"`
}

// Validate validates this API key
func (m *APIKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIKey) validateCreator(formats strfmt.Registry) error {

	if swag.IsZero(m.Creator) { // not required
		return nil
	}

	if m.Creator != nil {
		if err := m.Creator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *APIKey) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *APIKey) validateOrgID(formats strfmt.Registry) error {

	if err := validate.Required("orgId", "body", m.OrgID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIKey) UnmarshalBinary(b []byte) error {
	var res APIKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
