// Code generated by go-swagger; DO NOT EDIT.

package org

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new org API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for org API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddAPIKeyToOrg adds a new API key to an org
*/
func (a *Client) AddAPIKeyToOrg(params *AddAPIKeyToOrgParams, authInfo runtime.ClientAuthInfoWriter) (*AddAPIKeyToOrgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAPIKeyToOrgParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAPIKeyToOrg",
		Method:             "POST",
		PathPattern:        "/org/key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAPIKeyToOrgReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddAPIKeyToOrgOK), nil

}

/*
AddAdminToOrg adds a new admin to this org
*/
func (a *Client) AddAdminToOrg(params *AddAdminToOrgParams, authInfo runtime.ClientAuthInfoWriter) (*AddAdminToOrgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAdminToOrgParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAdminToOrg",
		Method:             "POST",
		PathPattern:        "/org/admin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAdminToOrgReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddAdminToOrgOK), nil

}

/*
AddOrganization creates a new organization must be an authenticated request with a valid id token from a trusted Id p
*/
func (a *Client) AddOrganization(params *AddOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*AddOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addOrganization",
		Method:             "POST",
		PathPattern:        "/org",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddOrganizationOK), nil

}

/*
DeleteAPIKeyFromOrg removes an existing API key
*/
func (a *Client) DeleteAPIKeyFromOrg(params *DeleteAPIKeyFromOrgParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIKeyFromOrgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIKeyFromOrgParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAPIKeyFromOrg",
		Method:             "DELETE",
		PathPattern:        "/org/key/{apikey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIKeyFromOrgReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIKeyFromOrgOK), nil

}

/*
DeleteAdminFromOrg removes an existing admin from the org you can not remove the last admin it will faile with a bad request response
*/
func (a *Client) DeleteAdminFromOrg(params *DeleteAdminFromOrgParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAdminFromOrgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAdminFromOrgParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAdminFromOrg",
		Method:             "DELETE",
		PathPattern:        "/org/admin/{email}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAdminFromOrgReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAdminFromOrgOK), nil

}

/*
DeleteOrganization removes an existing organization
*/
func (a *Client) DeleteOrganization(params *DeleteOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrganization",
		Method:             "DELETE",
		PathPattern:        "/org/{orgId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrganizationOK), nil

}

/*
GetOrganization gets an existing organization
*/
func (a *Client) GetOrganization(params *GetOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganization",
		Method:             "GET",
		PathPattern:        "/org/{orgId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationOK), nil

}

/*
GetOrganizationFromAPIKey gets an existing organization
*/
func (a *Client) GetOrganizationFromAPIKey(params *GetOrganizationFromAPIKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationFromAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationFromAPIKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationFromAPIKey",
		Method:             "GET",
		PathPattern:        "/org/key/{apikey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationFromAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationFromAPIKeyOK), nil

}

/*
UpdateStripeCustomerID updates the stripe customer Id associated with this account
*/
func (a *Client) UpdateStripeCustomerID(params *UpdateStripeCustomerIDParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStripeCustomerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStripeCustomerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStripeCustomerId",
		Method:             "POST",
		PathPattern:        "/org/stripeId",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateStripeCustomerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateStripeCustomerIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
