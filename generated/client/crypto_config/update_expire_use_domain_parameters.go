// Code generated by go-swagger; DO NOT EDIT.

package crypto_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateExpireUseDomainParams creates a new UpdateExpireUseDomainParams object
// with the default values initialized.
func NewUpdateExpireUseDomainParams() *UpdateExpireUseDomainParams {
	var ()
	return &UpdateExpireUseDomainParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateExpireUseDomainParamsWithTimeout creates a new UpdateExpireUseDomainParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateExpireUseDomainParamsWithTimeout(timeout time.Duration) *UpdateExpireUseDomainParams {
	var ()
	return &UpdateExpireUseDomainParams{

		timeout: timeout,
	}
}

// NewUpdateExpireUseDomainParamsWithContext creates a new UpdateExpireUseDomainParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateExpireUseDomainParamsWithContext(ctx context.Context) *UpdateExpireUseDomainParams {
	var ()
	return &UpdateExpireUseDomainParams{

		Context: ctx,
	}
}

// NewUpdateExpireUseDomainParamsWithHTTPClient creates a new UpdateExpireUseDomainParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateExpireUseDomainParamsWithHTTPClient(client *http.Client) *UpdateExpireUseDomainParams {
	var ()
	return &UpdateExpireUseDomainParams{
		HTTPClient: client,
	}
}

/*UpdateExpireUseDomainParams contains all the parameters to send to the API endpoint
for the update expire use domain operation typically these are written to a http.Request
*/
type UpdateExpireUseDomainParams struct {

	/*DecryptionTTL*/
	DecryptionTTL int64
	/*EncryptionTTL*/
	EncryptionTTL int64
	/*InceptionTTL*/
	InceptionTTL int64
	/*RetentionTTL*/
	RetentionTTL int64
	/*UseDomainID*/
	UseDomainID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update expire use domain params
func (o *UpdateExpireUseDomainParams) WithTimeout(timeout time.Duration) *UpdateExpireUseDomainParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update expire use domain params
func (o *UpdateExpireUseDomainParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update expire use domain params
func (o *UpdateExpireUseDomainParams) WithContext(ctx context.Context) *UpdateExpireUseDomainParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update expire use domain params
func (o *UpdateExpireUseDomainParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update expire use domain params
func (o *UpdateExpireUseDomainParams) WithHTTPClient(client *http.Client) *UpdateExpireUseDomainParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update expire use domain params
func (o *UpdateExpireUseDomainParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDecryptionTTL adds the decryptionTTL to the update expire use domain params
func (o *UpdateExpireUseDomainParams) WithDecryptionTTL(decryptionTTL int64) *UpdateExpireUseDomainParams {
	o.SetDecryptionTTL(decryptionTTL)
	return o
}

// SetDecryptionTTL adds the decryptionTtl to the update expire use domain params
func (o *UpdateExpireUseDomainParams) SetDecryptionTTL(decryptionTTL int64) {
	o.DecryptionTTL = decryptionTTL
}

// WithEncryptionTTL adds the encryptionTTL to the update expire use domain params
func (o *UpdateExpireUseDomainParams) WithEncryptionTTL(encryptionTTL int64) *UpdateExpireUseDomainParams {
	o.SetEncryptionTTL(encryptionTTL)
	return o
}

// SetEncryptionTTL adds the encryptionTtl to the update expire use domain params
func (o *UpdateExpireUseDomainParams) SetEncryptionTTL(encryptionTTL int64) {
	o.EncryptionTTL = encryptionTTL
}

// WithInceptionTTL adds the inceptionTTL to the update expire use domain params
func (o *UpdateExpireUseDomainParams) WithInceptionTTL(inceptionTTL int64) *UpdateExpireUseDomainParams {
	o.SetInceptionTTL(inceptionTTL)
	return o
}

// SetInceptionTTL adds the inceptionTtl to the update expire use domain params
func (o *UpdateExpireUseDomainParams) SetInceptionTTL(inceptionTTL int64) {
	o.InceptionTTL = inceptionTTL
}

// WithRetentionTTL adds the retentionTTL to the update expire use domain params
func (o *UpdateExpireUseDomainParams) WithRetentionTTL(retentionTTL int64) *UpdateExpireUseDomainParams {
	o.SetRetentionTTL(retentionTTL)
	return o
}

// SetRetentionTTL adds the retentionTtl to the update expire use domain params
func (o *UpdateExpireUseDomainParams) SetRetentionTTL(retentionTTL int64) {
	o.RetentionTTL = retentionTTL
}

// WithUseDomainID adds the useDomainID to the update expire use domain params
func (o *UpdateExpireUseDomainParams) WithUseDomainID(useDomainID string) *UpdateExpireUseDomainParams {
	o.SetUseDomainID(useDomainID)
	return o
}

// SetUseDomainID adds the useDomainId to the update expire use domain params
func (o *UpdateExpireUseDomainParams) SetUseDomainID(useDomainID string) {
	o.UseDomainID = useDomainID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateExpireUseDomainParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param decryptionTTL
	qrDecryptionTTL := o.DecryptionTTL
	qDecryptionTTL := swag.FormatInt64(qrDecryptionTTL)
	if qDecryptionTTL != "" {
		if err := r.SetQueryParam("decryptionTTL", qDecryptionTTL); err != nil {
			return err
		}
	}

	// query param encryptionTTL
	qrEncryptionTTL := o.EncryptionTTL
	qEncryptionTTL := swag.FormatInt64(qrEncryptionTTL)
	if qEncryptionTTL != "" {
		if err := r.SetQueryParam("encryptionTTL", qEncryptionTTL); err != nil {
			return err
		}
	}

	// query param inceptionTTL
	qrInceptionTTL := o.InceptionTTL
	qInceptionTTL := swag.FormatInt64(qrInceptionTTL)
	if qInceptionTTL != "" {
		if err := r.SetQueryParam("inceptionTTL", qInceptionTTL); err != nil {
			return err
		}
	}

	// query param retentionTTL
	qrRetentionTTL := o.RetentionTTL
	qRetentionTTL := swag.FormatInt64(qrRetentionTTL)
	if qRetentionTTL != "" {
		if err := r.SetQueryParam("retentionTTL", qRetentionTTL); err != nil {
			return err
		}
	}

	// path param useDomainId
	if err := r.SetPathParam("useDomainId", o.UseDomainID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
