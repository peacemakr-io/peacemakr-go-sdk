// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CryptoConfig crypto config
// swagger:model CryptoConfig
type CryptoConfig struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// the org id of the organization that owns these symmetric keys
	// Required: true
	OwnerOrgID *string `json:"ownerOrgId"`

	// to guide SDK's on how to select an encryption domain, a selectorScheme helps an SDK map a encryption request to a set of keys and encryption algoritm
	// Required: true
	SymmetricKeyUseDomainSelectorScheme *string `json:"symmetricKeyUseDomainSelectorScheme"`

	// every application layer encryption must select a key to use from one specific active semmetric key encryption domain. this is an array of encryption domains id's that are currently available for encryption
	// Required: true
	SymmetricKeyUseDomains []*SymmetricKeyUseDomain `json:"symmetricKeyUseDomains"`
}

// Validate validates this crypto config
func (m *CryptoConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerOrgID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymmetricKeyUseDomainSelectorScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymmetricKeyUseDomains(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CryptoConfig) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CryptoConfig) validateOwnerOrgID(formats strfmt.Registry) error {

	if err := validate.Required("ownerOrgId", "body", m.OwnerOrgID); err != nil {
		return err
	}

	return nil
}

func (m *CryptoConfig) validateSymmetricKeyUseDomainSelectorScheme(formats strfmt.Registry) error {

	if err := validate.Required("symmetricKeyUseDomainSelectorScheme", "body", m.SymmetricKeyUseDomainSelectorScheme); err != nil {
		return err
	}

	return nil
}

func (m *CryptoConfig) validateSymmetricKeyUseDomains(formats strfmt.Registry) error {

	if err := validate.Required("symmetricKeyUseDomains", "body", m.SymmetricKeyUseDomains); err != nil {
		return err
	}

	for i := 0; i < len(m.SymmetricKeyUseDomains); i++ {
		if swag.IsZero(m.SymmetricKeyUseDomains[i]) { // not required
			continue
		}

		if m.SymmetricKeyUseDomains[i] != nil {
			if err := m.SymmetricKeyUseDomains[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("symmetricKeyUseDomains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CryptoConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CryptoConfig) UnmarshalBinary(b []byte) error {
	var res CryptoConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
