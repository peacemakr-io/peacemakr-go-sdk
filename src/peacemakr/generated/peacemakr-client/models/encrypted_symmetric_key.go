// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EncryptedSymmetricKey encrypted symmetric key
// swagger:model EncryptedSymmetricKey
type EncryptedSymmetricKey struct {

	// id's of the symmetric keys encrypted in packedCiphertext
	// Required: true
	KeyIds []string `json:"keyIds"`

	// length of the keys encrypted in packedCiphertext
	// Required: true
	KeyLength *int64 `json:"keyLength"`

	// the actual packaged ciphertext of the encrypted symmetric key, of key
	// Required: true
	PackagedCiphertext *string `json:"packagedCiphertext"`

	// id of the symmetric key use domain which contains this key
	// Required: true
	SymmetricKeyUseDomainID *string `json:"symmetricKeyUseDomainId"`
}

// Validate validates this encrypted symmetric key
func (m *EncryptedSymmetricKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeyIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackagedCiphertext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymmetricKeyUseDomainID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EncryptedSymmetricKey) validateKeyIds(formats strfmt.Registry) error {

	if err := validate.Required("keyIds", "body", m.KeyIds); err != nil {
		return err
	}

	return nil
}

func (m *EncryptedSymmetricKey) validateKeyLength(formats strfmt.Registry) error {

	if err := validate.Required("keyLength", "body", m.KeyLength); err != nil {
		return err
	}

	return nil
}

func (m *EncryptedSymmetricKey) validatePackagedCiphertext(formats strfmt.Registry) error {

	if err := validate.Required("packagedCiphertext", "body", m.PackagedCiphertext); err != nil {
		return err
	}

	return nil
}

func (m *EncryptedSymmetricKey) validateSymmetricKeyUseDomainID(formats strfmt.Registry) error {

	if err := validate.Required("symmetricKeyUseDomainId", "body", m.SymmetricKeyUseDomainID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EncryptedSymmetricKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EncryptedSymmetricKey) UnmarshalBinary(b []byte) error {
	var res EncryptedSymmetricKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
