// Code generated by go-swagger; DO NOT EDIT.

package crypto_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new crypto config API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for crypto config API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddExistingUseDomain adds an existing use domain to another crypto config
*/
func (a *Client) AddExistingUseDomain(params *AddExistingUseDomainParams, authInfo runtime.ClientAuthInfoWriter) (*AddExistingUseDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddExistingUseDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addExistingUseDomain",
		Method:             "POST",
		PathPattern:        "/crypto/config/{cryptoConfigId}/useDomain/{useDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddExistingUseDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddExistingUseDomainOK), nil

}

/*
AddUseDomain adds a new active use domain and attached it to the crypto config
*/
func (a *Client) AddUseDomain(params *AddUseDomainParams, authInfo runtime.ClientAuthInfoWriter) (*AddUseDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUseDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addUseDomain",
		Method:             "POST",
		PathPattern:        "/crypto/config/{cryptoConfigId}/useDomain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddUseDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddUseDomainOK), nil

}

/*
GetCryptoConfig gets the crypto configurations
*/
func (a *Client) GetCryptoConfig(params *GetCryptoConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GetCryptoConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCryptoConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCryptoConfig",
		Method:             "GET",
		PathPattern:        "/crypto/config/{cryptoConfigId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCryptoConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCryptoConfigOK), nil

}

/*
RemoveUseDomain expires a use domain
*/
func (a *Client) RemoveUseDomain(params *RemoveUseDomainParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveUseDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUseDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeUseDomain",
		Method:             "DELETE",
		PathPattern:        "/crypto/useDomain/{useDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveUseDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveUseDomainOK), nil

}

/*
UpdateCryptoConfigFallbackToCloud updates an existing crypto config s asymmetric key TTL
*/
func (a *Client) UpdateCryptoConfigFallbackToCloud(params *UpdateCryptoConfigFallbackToCloudParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCryptoConfigFallbackToCloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCryptoConfigFallbackToCloudParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCryptoConfigFallbackToCloud",
		Method:             "PUT",
		PathPattern:        "/crypto/useDomain/{useDomainId}/enableKDSFallbackToCloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCryptoConfigFallbackToCloudReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCryptoConfigFallbackToCloudOK), nil

}

/*
UpdateCryptoConfigSelectorScheme updates an existing crypto config s domain selector scheme
*/
func (a *Client) UpdateCryptoConfigSelectorScheme(params *UpdateCryptoConfigSelectorSchemeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCryptoConfigSelectorSchemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCryptoConfigSelectorSchemeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCryptoConfigSelectorScheme",
		Method:             "PUT",
		PathPattern:        "/crypto/config/{cryptoConfigId}/domainSelectorScheme",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCryptoConfigSelectorSchemeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCryptoConfigSelectorSchemeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
