// Code generated by go-swagger; DO NOT EDIT.

package crypto_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "peacemakr/generated/peacemakr-client/models"
)

// AddUseDomainReader is a Reader for the AddUseDomain structure.
type AddUseDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddUseDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddUseDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddUseDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddUseDomainOK creates a AddUseDomainOK with default headers values
func NewAddUseDomainOK() *AddUseDomainOK {
	return &AddUseDomainOK{}
}

/*AddUseDomainOK handles this case with default header values.

Successfully add the new use domain to the crypto config overrides the id due to object creation
*/
type AddUseDomainOK struct {
	Payload *models.SymmetricKeyUseDomain
}

func (o *AddUseDomainOK) Error() string {
	return fmt.Sprintf("[POST /crypto/config/{cryptoConfigId}/useDomain][%d] addUseDomainOK  %+v", 200, o.Payload)
}

func (o *AddUseDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SymmetricKeyUseDomain)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUseDomainBadRequest creates a AddUseDomainBadRequest with default headers values
func NewAddUseDomainBadRequest() *AddUseDomainBadRequest {
	return &AddUseDomainBadRequest{}
}

/*AddUseDomainBadRequest handles this case with default header values.

Unable to process request
*/
type AddUseDomainBadRequest struct {
}

func (o *AddUseDomainBadRequest) Error() string {
	return fmt.Sprintf("[POST /crypto/config/{cryptoConfigId}/useDomain][%d] addUseDomainBadRequest ", 400)
}

func (o *AddUseDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
