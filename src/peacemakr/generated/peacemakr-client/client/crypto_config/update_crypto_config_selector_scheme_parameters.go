// Code generated by go-swagger; DO NOT EDIT.

package crypto_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateCryptoConfigSelectorSchemeParams creates a new UpdateCryptoConfigSelectorSchemeParams object
// with the default values initialized.
func NewUpdateCryptoConfigSelectorSchemeParams() *UpdateCryptoConfigSelectorSchemeParams {
	var ()
	return &UpdateCryptoConfigSelectorSchemeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateCryptoConfigSelectorSchemeParamsWithTimeout creates a new UpdateCryptoConfigSelectorSchemeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateCryptoConfigSelectorSchemeParamsWithTimeout(timeout time.Duration) *UpdateCryptoConfigSelectorSchemeParams {
	var ()
	return &UpdateCryptoConfigSelectorSchemeParams{

		timeout: timeout,
	}
}

// NewUpdateCryptoConfigSelectorSchemeParamsWithContext creates a new UpdateCryptoConfigSelectorSchemeParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateCryptoConfigSelectorSchemeParamsWithContext(ctx context.Context) *UpdateCryptoConfigSelectorSchemeParams {
	var ()
	return &UpdateCryptoConfigSelectorSchemeParams{

		Context: ctx,
	}
}

// NewUpdateCryptoConfigSelectorSchemeParamsWithHTTPClient creates a new UpdateCryptoConfigSelectorSchemeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateCryptoConfigSelectorSchemeParamsWithHTTPClient(client *http.Client) *UpdateCryptoConfigSelectorSchemeParams {
	var ()
	return &UpdateCryptoConfigSelectorSchemeParams{
		HTTPClient: client,
	}
}

/*UpdateCryptoConfigSelectorSchemeParams contains all the parameters to send to the API endpoint
for the update crypto config selector scheme operation typically these are written to a http.Request
*/
type UpdateCryptoConfigSelectorSchemeParams struct {

	/*CryptoConfigID*/
	CryptoConfigID string
	/*NewSelectorScheme*/
	NewSelectorScheme string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update crypto config selector scheme params
func (o *UpdateCryptoConfigSelectorSchemeParams) WithTimeout(timeout time.Duration) *UpdateCryptoConfigSelectorSchemeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update crypto config selector scheme params
func (o *UpdateCryptoConfigSelectorSchemeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update crypto config selector scheme params
func (o *UpdateCryptoConfigSelectorSchemeParams) WithContext(ctx context.Context) *UpdateCryptoConfigSelectorSchemeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update crypto config selector scheme params
func (o *UpdateCryptoConfigSelectorSchemeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update crypto config selector scheme params
func (o *UpdateCryptoConfigSelectorSchemeParams) WithHTTPClient(client *http.Client) *UpdateCryptoConfigSelectorSchemeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update crypto config selector scheme params
func (o *UpdateCryptoConfigSelectorSchemeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCryptoConfigID adds the cryptoConfigID to the update crypto config selector scheme params
func (o *UpdateCryptoConfigSelectorSchemeParams) WithCryptoConfigID(cryptoConfigID string) *UpdateCryptoConfigSelectorSchemeParams {
	o.SetCryptoConfigID(cryptoConfigID)
	return o
}

// SetCryptoConfigID adds the cryptoConfigId to the update crypto config selector scheme params
func (o *UpdateCryptoConfigSelectorSchemeParams) SetCryptoConfigID(cryptoConfigID string) {
	o.CryptoConfigID = cryptoConfigID
}

// WithNewSelectorScheme adds the newSelectorScheme to the update crypto config selector scheme params
func (o *UpdateCryptoConfigSelectorSchemeParams) WithNewSelectorScheme(newSelectorScheme string) *UpdateCryptoConfigSelectorSchemeParams {
	o.SetNewSelectorScheme(newSelectorScheme)
	return o
}

// SetNewSelectorScheme adds the newSelectorScheme to the update crypto config selector scheme params
func (o *UpdateCryptoConfigSelectorSchemeParams) SetNewSelectorScheme(newSelectorScheme string) {
	o.NewSelectorScheme = newSelectorScheme
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateCryptoConfigSelectorSchemeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cryptoConfigId
	if err := r.SetPathParam("cryptoConfigId", o.CryptoConfigID); err != nil {
		return err
	}

	// query param newSelectorScheme
	qrNewSelectorScheme := o.NewSelectorScheme
	qNewSelectorScheme := qrNewSelectorScheme
	if qNewSelectorScheme != "" {
		if err := r.SetQueryParam("newSelectorScheme", qNewSelectorScheme); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
