// Code generated by go-swagger; DO NOT EDIT.

package key_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "peacemakr/generated/peacemakr-client/models"
)

// NewPostNewEncryptedKeysParams creates a new PostNewEncryptedKeysParams object
// with the default values initialized.
func NewPostNewEncryptedKeysParams() *PostNewEncryptedKeysParams {
	var ()
	return &PostNewEncryptedKeysParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostNewEncryptedKeysParamsWithTimeout creates a new PostNewEncryptedKeysParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostNewEncryptedKeysParamsWithTimeout(timeout time.Duration) *PostNewEncryptedKeysParams {
	var ()
	return &PostNewEncryptedKeysParams{

		timeout: timeout,
	}
}

// NewPostNewEncryptedKeysParamsWithContext creates a new PostNewEncryptedKeysParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostNewEncryptedKeysParamsWithContext(ctx context.Context) *PostNewEncryptedKeysParams {
	var ()
	return &PostNewEncryptedKeysParams{

		Context: ctx,
	}
}

// NewPostNewEncryptedKeysParamsWithHTTPClient creates a new PostNewEncryptedKeysParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostNewEncryptedKeysParamsWithHTTPClient(client *http.Client) *PostNewEncryptedKeysParams {
	var ()
	return &PostNewEncryptedKeysParams{
		HTTPClient: client,
	}
}

/*PostNewEncryptedKeysParams contains all the parameters to send to the API endpoint
for the post new encrypted keys operation typically these are written to a http.Request
*/
type PostNewEncryptedKeysParams struct {

	/*EncryptedSymmetricKey*/
	EncryptedSymmetricKey []*models.EncryptedSymmetricKey
	/*EncryptingKeyID*/
	EncryptingKeyID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post new encrypted keys params
func (o *PostNewEncryptedKeysParams) WithTimeout(timeout time.Duration) *PostNewEncryptedKeysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post new encrypted keys params
func (o *PostNewEncryptedKeysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post new encrypted keys params
func (o *PostNewEncryptedKeysParams) WithContext(ctx context.Context) *PostNewEncryptedKeysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post new encrypted keys params
func (o *PostNewEncryptedKeysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post new encrypted keys params
func (o *PostNewEncryptedKeysParams) WithHTTPClient(client *http.Client) *PostNewEncryptedKeysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post new encrypted keys params
func (o *PostNewEncryptedKeysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEncryptedSymmetricKey adds the encryptedSymmetricKey to the post new encrypted keys params
func (o *PostNewEncryptedKeysParams) WithEncryptedSymmetricKey(encryptedSymmetricKey []*models.EncryptedSymmetricKey) *PostNewEncryptedKeysParams {
	o.SetEncryptedSymmetricKey(encryptedSymmetricKey)
	return o
}

// SetEncryptedSymmetricKey adds the encryptedSymmetricKey to the post new encrypted keys params
func (o *PostNewEncryptedKeysParams) SetEncryptedSymmetricKey(encryptedSymmetricKey []*models.EncryptedSymmetricKey) {
	o.EncryptedSymmetricKey = encryptedSymmetricKey
}

// WithEncryptingKeyID adds the encryptingKeyID to the post new encrypted keys params
func (o *PostNewEncryptedKeysParams) WithEncryptingKeyID(encryptingKeyID string) *PostNewEncryptedKeysParams {
	o.SetEncryptingKeyID(encryptingKeyID)
	return o
}

// SetEncryptingKeyID adds the encryptingKeyId to the post new encrypted keys params
func (o *PostNewEncryptedKeysParams) SetEncryptingKeyID(encryptingKeyID string) {
	o.EncryptingKeyID = encryptingKeyID
}

// WriteToRequest writes these params to a swagger request
func (o *PostNewEncryptedKeysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EncryptedSymmetricKey != nil {
		if err := r.SetBodyParam(o.EncryptedSymmetricKey); err != nil {
			return err
		}
	}

	// path param encryptingKeyId
	if err := r.SetPathParam("encryptingKeyId", o.EncryptingKeyID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
