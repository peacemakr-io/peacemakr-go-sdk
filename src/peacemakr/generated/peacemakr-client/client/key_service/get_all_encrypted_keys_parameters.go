// Code generated by go-swagger; DO NOT EDIT.

package key_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAllEncryptedKeysParams creates a new GetAllEncryptedKeysParams object
// with the default values initialized.
func NewGetAllEncryptedKeysParams() *GetAllEncryptedKeysParams {
	var ()
	return &GetAllEncryptedKeysParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllEncryptedKeysParamsWithTimeout creates a new GetAllEncryptedKeysParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllEncryptedKeysParamsWithTimeout(timeout time.Duration) *GetAllEncryptedKeysParams {
	var ()
	return &GetAllEncryptedKeysParams{

		timeout: timeout,
	}
}

// NewGetAllEncryptedKeysParamsWithContext creates a new GetAllEncryptedKeysParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllEncryptedKeysParamsWithContext(ctx context.Context) *GetAllEncryptedKeysParams {
	var ()
	return &GetAllEncryptedKeysParams{

		Context: ctx,
	}
}

// NewGetAllEncryptedKeysParamsWithHTTPClient creates a new GetAllEncryptedKeysParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllEncryptedKeysParamsWithHTTPClient(client *http.Client) *GetAllEncryptedKeysParams {
	var ()
	return &GetAllEncryptedKeysParams{
		HTTPClient: client,
	}
}

/*GetAllEncryptedKeysParams contains all the parameters to send to the API endpoint
for the get all encrypted keys operation typically these are written to a http.Request
*/
type GetAllEncryptedKeysParams struct {

	/*EncryptingKeyID*/
	EncryptingKeyID string
	/*SymmetricKeyIds*/
	SymmetricKeyIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all encrypted keys params
func (o *GetAllEncryptedKeysParams) WithTimeout(timeout time.Duration) *GetAllEncryptedKeysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all encrypted keys params
func (o *GetAllEncryptedKeysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all encrypted keys params
func (o *GetAllEncryptedKeysParams) WithContext(ctx context.Context) *GetAllEncryptedKeysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all encrypted keys params
func (o *GetAllEncryptedKeysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all encrypted keys params
func (o *GetAllEncryptedKeysParams) WithHTTPClient(client *http.Client) *GetAllEncryptedKeysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all encrypted keys params
func (o *GetAllEncryptedKeysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEncryptingKeyID adds the encryptingKeyID to the get all encrypted keys params
func (o *GetAllEncryptedKeysParams) WithEncryptingKeyID(encryptingKeyID string) *GetAllEncryptedKeysParams {
	o.SetEncryptingKeyID(encryptingKeyID)
	return o
}

// SetEncryptingKeyID adds the encryptingKeyId to the get all encrypted keys params
func (o *GetAllEncryptedKeysParams) SetEncryptingKeyID(encryptingKeyID string) {
	o.EncryptingKeyID = encryptingKeyID
}

// WithSymmetricKeyIds adds the symmetricKeyIds to the get all encrypted keys params
func (o *GetAllEncryptedKeysParams) WithSymmetricKeyIds(symmetricKeyIds []string) *GetAllEncryptedKeysParams {
	o.SetSymmetricKeyIds(symmetricKeyIds)
	return o
}

// SetSymmetricKeyIds adds the symmetricKeyIds to the get all encrypted keys params
func (o *GetAllEncryptedKeysParams) SetSymmetricKeyIds(symmetricKeyIds []string) {
	o.SymmetricKeyIds = symmetricKeyIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllEncryptedKeysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param encryptingKeyId
	if err := r.SetPathParam("encryptingKeyId", o.EncryptingKeyID); err != nil {
		return err
	}

	valuesSymmetricKeyIds := o.SymmetricKeyIds

	joinedSymmetricKeyIds := swag.JoinByFormat(valuesSymmetricKeyIds, "")
	// query array param symmetricKeyIds
	if err := r.SetQueryParam("symmetricKeyIds", joinedSymmetricKeyIds...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
