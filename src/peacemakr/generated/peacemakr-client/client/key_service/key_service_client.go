// Code generated by go-swagger; DO NOT EDIT.

package key_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new key service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for key service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAllEncryptedKeys gets all encrypted symmetric keys that are encrypted with this encrypting key Id optionally limiting the request to a set of symmetric key domains
*/
func (a *Client) GetAllEncryptedKeys(params *GetAllEncryptedKeysParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllEncryptedKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllEncryptedKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllEncryptedKeys",
		Method:             "GET",
		PathPattern:        "/crypto/symmetric/{encryptingKeyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllEncryptedKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllEncryptedKeysOK), nil

}

/*
GetPublicKey gets the public key associated with the passed in key ID
*/
func (a *Client) GetPublicKey(params *GetPublicKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetPublicKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicKey",
		Method:             "GET",
		PathPattern:        "/crypto/asymmetric/{keyID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPublicKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicKeyOK), nil

}

/*
PostNewEncryptedKeys adds a new encrypted key the encrypting key that protects the encrypted key is identified with encrypting key Id request must come from a registered key manager
*/
func (a *Client) PostNewEncryptedKeys(params *PostNewEncryptedKeysParams, authInfo runtime.ClientAuthInfoWriter) (*PostNewEncryptedKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNewEncryptedKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postNewEncryptedKeys",
		Method:             "POST",
		PathPattern:        "/crypto/symmetric/{encryptingKeyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostNewEncryptedKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNewEncryptedKeysOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
